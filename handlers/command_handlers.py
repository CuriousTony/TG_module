import random
import os
import sqlite3
from aiogram.fsm.context import FSMContext
from gtts import gTTS
from googletrans import Translator
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram import Router, F
from bot_giblets import bot
from table.db_form import FormDB
from keyboards.reply import start_keyboard
from keyboards.inline import links_keyboard, dynamic_keyboard

router = Router()


@router.message(Command('apply', ignore_case=True))
async def handle_apply(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –ó–µ—Ä–æ–±–æ—Ç!\n–î–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º —Ç–µ–±—è –≤ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫—Ä—É–∂–æ–∫?\n'
                         '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è.')
    await state.set_state(FormDB.name)


@router.message(FormDB.name)
async def name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    await state.set_state(FormDB.age)


@router.message(FormDB.age)
async def age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer('–í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?')
    await state.set_state(FormDB.grade)


@router.message(FormDB.grade)
async def grade(message: Message, state: FSMContext):
    await state.update_data(grade=message.text)
    student_data = await state.get_data()
    conn = sqlite3.connect('school_data.db')
    curs = conn.cursor()
    curs.execute('''INSERT INTO students(name, age, grade) VALUES (?, ?, ?)''',
                 (student_data['name'], student_data['age'], student_data['grade'])
                 )
    await message.answer(f'–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–µ –∏–º—è {student_data['name']}, —Ç–µ–±–µ {student_data['age']} –ª–µ—Ç\n'
                         f'–∏ —Ç—ã —É—á–∏—à—å—Å—è –≤ {student_data['grade']} –∫–ª–∞—Å—Å–µ!\n'
                         f'–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –≤ –∫—Ä—É–∂–æ–∫ –∏–≥—Ä—ã –Ω–∞ –ª–æ–∂–∫–∞—Ö!')
    conn.commit()
    conn.close()
    await state.clear()


@router.message(CommandStart())
async def handle_start(message: Message):
    await message.answer('–ï—Å—Ç—å –¥–≤–µ –∫–Ω–æ–ø–∫–∏:', reply_markup=start_keyboard)


@router.message(Command('help', ignore_case=True))
async def handle_help(message: Message):
    await message.answer('–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —è —É–º–µ—é:\n'
                         '/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞;\n'
                         '/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º;\n'
                         '/apply - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫—Ä—É–∂–æ–∫;\n'
                         '/links - —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã;\n'
                         '/dynamic - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä;\n'
                         '/–∞—É–¥–∏–æ - –ø—Ä–∏—à–ª—é –∞—É–¥–∏–æ—Ñ–∞–π–ª;\n'
                         '/—Ç—Ä–µ–Ω—è - –ø—Ä–∏—à–ª—é –æ–∑—É–≤—É—á–∫—É —Å–ª—É—á–∞–π–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n'
                         '/–ø–µ—Ä–µ–≤–æ–¥ "—Ç–µ–∫—Å—Ç" - –ø–µ—Ä–µ–≤–µ–¥—É —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π')


@router.message(F.photo)
async def get_photo(message: Message):
    await bot.download(message.photo[-1], destination=f'img/{message.photo[-1].file_id}.jpg')
    await message.answer('–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')


@router.message(Command('–∞—É–¥–∏–æ'))
async def send_audio(message: Message):
    audio = FSInputFile('audio/zdes-nashi-polnomochiya-vse.mp3')
    await bot.send_audio(message.chat.id, audio)


@router.message(Command('—Ç—Ä–µ–Ω—è'))
async def training(message: Message):
    training_list = [
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1:\\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n2. –í–µ–ª–æ—Å–∏–ø–µ–¥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)\\n3. –ü–ª–∞–Ω–∫–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 30 —Å–µ–∫—É–Ω–¥",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 2:\\n1. –ü–æ–¥—ä–µ–º—ã –Ω–æ–≥: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n2. –†—É—Å—Å–∫–∏–π —Ç–≤–∏—Å—Ç: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)\\n3. –ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥–Ω—è—Ç–æ–π –Ω–æ–≥–æ–π: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥–∞—è –Ω–æ–≥–∞)",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 3:\\n1. –°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Å –ø–æ–¥–Ω—è—Ç—ã–º–∏ –Ω–æ–≥–∞–º–∏: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n2. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–æ–∂–Ω–∏—Ü—ã: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\\n3. –ë–æ–∫–æ–≤–∞—è –ø–ª–∞–Ω–∫–∞: 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 20 —Å–µ–∫—É–Ω–¥ (–∫–∞–∂–¥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)"
    ]
    await bot.send_chat_action(message.chat.id, 'upload_audio')
    rand_tr = random.choice(training_list)
    audio_workout = gTTS(text=rand_tr, lang='ru')
    audio_workout.save('audio/gtts/workout1.mp3')
    audio = FSInputFile('audio/gtts/workout1.mp3')
    await bot.send_audio(message.chat.id, audio)
    os.remove('audio/gtts/workout1.mp3')


@router.message(Command('–ø–µ—Ä–µ–≤–æ–¥'))
async def translate(message: Message, command: CommandObject):
    data = command.args
    if not data:
        await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.')
    else:
        translator = Translator()
        translated = translator.translate(data, dest='en')
        await bot.send_message(message.chat.id, f'{message.from_user.username} says: "{translated.text}"')


@router.message(Command('links', ignore_case=True))
async def handle_links(message: Message):
    await message.answer('–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–æ—Å—É–≥:', reply_markup=links_keyboard)


@router.message(Command('dynamic'))
async def handle_dynamic(message: Message):
    await message.answer('–î–∏–Ω–∞–º–∏—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏!', reply_markup=dynamic_keyboard)


@router.message(F.text == '–ü—Ä–∏–≤–µ—Ç')
async def handle_hello(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} ‚úå')


@router.message(F.text == '–ü–æ–∫–∞')
async def handle_bye(message: Message):
    await message.answer(f'–ü–æ–∫–∞, {message.from_user.first_name} üëã', reply_markup=ReplyKeyboardRemove())
